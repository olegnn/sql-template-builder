// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sql-query attemps to pass invalid values to SQLQuery constructor 1`] = `"SQLQuery 1st argument (queryParts) should be array, received: 1 with type number."`;

exports[`sql-query attemps to pass invalid values to SQLQuery constructor 2`] = `"SQLQuery 2nd argument (values) should be array, received: 1 with type number."`;

exports[`sql-query attemps to pass invalid values to SQLQuery constructor 3`] = `"SQLQuery 3rd argument (delimiter) should be string, received: 0 with type number."`;

exports[`sql-query attemps to pass invalid values to SQLQuery constructor 4`] = `"Template arg index can't be less than 1, received: 0."`;

exports[`sql-query attemps to pass invalid values to SQLQuery constructor 5`] = `"No such template arg: !"`;

exports[`sql-query attemps to set invalid values in query 1`] = `"SQLQuery name should be string, received: 0 with type number"`;

exports[`sql-query attemps to set invalid values in query 2`] = `"SQLQuery delimiter should be string, received: 0 with type number."`;

exports[`sql-query creates a simple sql statement 1`] = `"SELECT * FROM cars where name = $1"`;

exports[`sql-query creates a simple sql statement 2`] = `"SELECT * FROM cars where name = ?"`;

exports[`sql-query creates a simple sql statement 3`] = `
Array [
  123,
]
`;

exports[`sql-query creates a simple sql statement 4`] = `undefined`;

exports[`sql-query creates bunch of insert statements 1`] = `"INSERT INTO randoms VALUES $1"`;

exports[`sql-query creates bunch of insert statements 2`] = `"INSERT INTO randoms VALUES ?"`;

exports[`sql-query creates bunch of insert statements 3`] = `
Array [
  Array [
    Array [
      0.6181323459330601,
      0.5274565380505569,
      0.7000696258860464,
      0.7815711480320064,
      0.9371433950915682,
    ],
    Array [
      0.3650824402206174,
      0.1595414403296309,
      0.9293976539275104,
      0.037649011518704034,
      0.41173798458754307,
    ],
    Array [
      0.6930353425814768,
      0.7121006763795512,
      0.4057077621010592,
      0.4308763443801644,
      0.32467250272048775,
    ],
    Array [
      0.6897208158657151,
      0.22287760419345615,
      0.5273515054137508,
      0.7650702585633016,
      0.16057079180642386,
    ],
    Array [
      0.6675926745658798,
      0.8303484131711736,
      0.9148680662075892,
      0.6387881772297832,
      0.33955563575442826,
    ],
  ],
]
`;

exports[`sql-query creates bunch of insert statements 4`] = `undefined`;

exports[`sql-query creates insert statement which contains query inside of array of values 1`] = `"INSERT INTO randoms VALUES ($1,$2)"`;

exports[`sql-query creates insert statement which contains query inside of array of values 2`] = `"INSERT INTO randoms VALUES (?,?)"`;

exports[`sql-query creates insert statement which contains query inside of array of values 3`] = `
Array [
  Array [
    Array [
      0.1330345695292965,
      0.3087555548059029,
      0.15782168758438098,
      0.8914307967523212,
      0.6590624325544447,
    ],
    Array [
      0.1330345695292965,
      0.3087555548059029,
      0.15782168758438098,
      0.8914307967523212,
      0.6590624325544447,
    ],
    Array [
      0.1330345695292965,
      0.3087555548059029,
      0.15782168758438098,
      0.8914307967523212,
      0.6590624325544447,
    ],
    Array [
      0.1330345695292965,
      0.3087555548059029,
      0.15782168758438098,
      0.8914307967523212,
      0.6590624325544447,
    ],
    Array [
      0.1330345695292965,
      0.3087555548059029,
      0.15782168758438098,
      0.8914307967523212,
      0.6590624325544447,
    ],
  ],
  Array [
    Array [
      0.15782168758438098,
      0.15782168758438098,
    ],
    Array [
      0.6590624325544447,
      0.6590624325544447,
    ],
  ],
]
`;

exports[`sql-query creates insert statement which contains query inside of array of values 4`] = `undefined`;

exports[`sql-query creates insert statements using lazy evaluated values 1`] = `"INSERT INTO randoms VALUES ($1,$2,$3,$4,$5)"`;

exports[`sql-query creates insert statements using lazy evaluated values 2`] = `"INSERT INTO randoms VALUES (?,?,?,?,?)"`;

exports[`sql-query creates insert statements using lazy evaluated values 3`] = `
Array [
  0.030403041139161813,
  0.9916368534057693,
  0.6018355339802939,
  0.5183570252142247,
  0.8927941295201514,
]
`;

exports[`sql-query creates insert statements using lazy evaluated values 4`] = `undefined`;

exports[`sql-query creates named statement 1`] = `"      SELECT * FROM table    "`;

exports[`sql-query creates named statement 2`] = `"      SELECT * FROM table    "`;

exports[`sql-query creates named statement 3`] = `Array []`;

exports[`sql-query creates named statement 4`] = `"select_from_table"`;

exports[`sql-query creates nested query using rest parameters 1`] = `"INSERT INTO randoms VALUES ($1,$2,$3,$4,$5),($6,$7,$8,$9,$10),($11,$12,$13,$14,$15),($16,$17,$18,$19,$20),($21,$22,$23,$24,$25)"`;

exports[`sql-query creates nested query using rest parameters 2`] = `"INSERT INTO randoms VALUES (?,?,?,?,?),(?,?,?,?,?),(?,?,?,?,?),(?,?,?,?,?),(?,?,?,?,?)"`;

exports[`sql-query creates nested query using rest parameters 3`] = `
Array [
  0.1330345695292965,
  0.3087555548059029,
  0.15782168758438098,
  0.8914307967523212,
  0.6590624325544447,
  0.06506375788874474,
  0.36047481202714726,
  0.32332707855244647,
  0.2731640180512882,
  0.6316953839372026,
  0.920950181599979,
  0.08854906115208117,
  0.47474283207068235,
  0.8391625554958557,
  0.5373815478713315,
  0.737341390691238,
  0.171325936243528,
  0.19181998354398777,
  0.10584509459975844,
  0.17729080067019432,
  0.030403041139161813,
  0.9916368534057693,
  0.6018355339802939,
  0.5183570252142247,
  0.8927941295201514,
]
`;

exports[`sql-query creates nested query using rest parameters 4`] = `undefined`;

exports[`sql-query creates nested query with customly joined statements 1`] = `"WITH a+b+c+d as A, a-b-c-d as B and WITH a+b+c+d as A, a-b-c-d as B and WITH a+b+c+d as A, a-b-c-d as B"`;

exports[`sql-query creates nested query with customly joined statements 2`] = `"WITH a+b+c+d as A, a-b-c-d as B and WITH a+b+c+d as A, a-b-c-d as B and WITH a+b+c+d as A, a-b-c-d as B"`;

exports[`sql-query creates nested query with customly joined statements 3`] = `Array []`;

exports[`sql-query creates nested query with customly joined statements 4`] = `undefined`;

exports[`sql-query creates nested query with customly joined statements 5`] = `"WITH a+$1+with $2,$3+c+$4 as A, a-$5-with $6,$7-c-$8 as B and next and $9 and WITH a+$10+with $11,$12+c+$13 as A, a-$14-with $15,$16-c-$17 as B and next and $18 and WITH a+$19+with $20,$21+c+$22 as A, a-$23-with $24,$25-c-$26 as B"`;

exports[`sql-query creates nested query with customly joined statements 6`] = `"WITH a+?+with ?,?+c+? as A, a-?-with ?,?-c-? as B and next and ? and WITH a+?+with ?,?+c+? as A, a-?-with ?,?-c-? as B and next and ? and WITH a+?+with ?,?+c+? as A, a-?-with ?,?-c-? as B"`;

exports[`sql-query creates nested query with customly joined statements 7`] = `
Array [
  1,
  99,
  "Hello",
  2,
  1,
  99,
  "Hello",
  2,
  2,
  1,
  99,
  "Hello",
  2,
  1,
  99,
  "Hello",
  2,
  4,
  1,
  99,
  "Hello",
  2,
  1,
  99,
  "Hello",
  2,
]
`;

exports[`sql-query creates nested query with customly joined statements 8`] = `undefined`;

exports[`sql-query creates query with statements joined by "+" 1`] = `"a+b+c+d"`;

exports[`sql-query creates query with statements joined by "+" 2`] = `"a+b+c+d"`;

exports[`sql-query creates query with statements joined by "+" 3`] = `Array []`;

exports[`sql-query creates query with statements joined by "+" 4`] = `undefined`;

exports[`sql-query creates query with statements joined by "," 1`] = `"a,b,c,d"`;

exports[`sql-query creates query with statements joined by "," 2`] = `"a,b,c,d"`;

exports[`sql-query creates query with statements joined by "," 3`] = `Array []`;

exports[`sql-query creates query with statements joined by "," 4`] = `undefined`;

exports[`sql-query creates sql statement using set of values 1`] = `"SELECT * FROM cars WHERE name = ANY($1) and surname = $2 and age <= $3 LEFT INNER JOIN people ON (people.car_id = cars._id and people.age >= $4)"`;

exports[`sql-query creates sql statement using set of values 2`] = `"SELECT * FROM cars WHERE name = ANY(?) and surname = ? and age <= ? LEFT INNER JOIN people ON (people.car_id = cars._id and people.age >= ?)"`;

exports[`sql-query creates sql statement using set of values 3`] = `
Array [
  Array [
    1,
    2,
    3,
  ],
  "Alex",
  80,
  18,
]
`;

exports[`sql-query creates sql statement using set of values 4`] = `undefined`;

exports[`sql-query creates statement using lazy evaluated queries and checks count of fn calls 1`] = `"INSERT INTO $1 VALUES ($2, $3, $4)"`;

exports[`sql-query creates statement using lazy evaluated queries and checks count of fn calls 2`] = `"INSERT INTO ? VALUES (?, ?, ?)"`;

exports[`sql-query creates statement using lazy evaluated queries and checks count of fn calls 3`] = `
Array [
  undefined,
  undefined,
  undefined,
  undefined,
]
`;

exports[`sql-query creates statement using lazy evaluated queries and checks count of fn calls 4`] = `undefined`;

exports[`sql-query imports modules 1`] = `
SQLQuery {
  Symbol(sql-template-builder/QUERY_PARTS): Array [],
  Symbol(sql-template-builder/VALUES): Array [],
  Symbol(sql-template-builder/DELIMITER): "",
  Symbol(sql-template-builder/NAME): undefined,
  Symbol(sql-template-builder/GET_QUERY_VALUES): [Function],
  Symbol(sql-template-builder/GET_QUERY_STATEMENTS): [Function],
  Symbol(sql-template-builder/GET_TEXT): [Function],
  Symbol(sql-template-builder/GET_SQL): [Function],
}
`;

exports[`sql-query imports modules 2`] = `
SQLQuery {
  Symbol(sql-template-builder/QUERY_PARTS): Array [
    "SELECT * FROM table",
  ],
  Symbol(sql-template-builder/VALUES): Array [],
  Symbol(sql-template-builder/DELIMITER): "",
  Symbol(sql-template-builder/NAME): undefined,
  Symbol(sql-template-builder/GET_QUERY_VALUES): [Function],
  Symbol(sql-template-builder/GET_QUERY_STATEMENTS): [Function],
  Symbol(sql-template-builder/GET_TEXT): [Function],
  Symbol(sql-template-builder/GET_SQL): [Function],
}
`;

exports[`sql-query uses lazy evaluated statements 1`] = `"SELECT * FROM people WHERE name = $1"`;

exports[`sql-query uses lazy evaluated statements 2`] = `"SELECT * FROM people WHERE name = ?"`;

exports[`sql-query uses lazy evaluated statements 3`] = `
Array [
  "hey",
]
`;

exports[`sql-query uses lazy evaluated statements 4`] = `undefined`;
